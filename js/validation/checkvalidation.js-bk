// JavaScript Document
//$( document ).ready(function() {
//minStrict
$.validator.addMethod('minStrict', function (value, el, param) {
  return value > param;
}, "Enter value greater than zero");

$.validator.addMethod('minStrict1', function (value, el, param) {
  return value > param;
}, "Enter value greater than one");

//Duration validation
$.validator.addMethod('endYearGreaterThanOrEqualTO',
function (value, element, params) {
  if (!/Invalid|NaN/.value) {
    if ($(params[1]).val() != 0) {
      if (value == 9999) {
        return false;
      } else {
        return value >= $(params[0]).val();
      }
    } else {
      if (value == 9999) {
        return true;
      } else {
        return false;
      }
    }
  }
  return isNaN(value) && isNaN($(params[2]).val());
  //|| (Number(value) >= Number($(params[2]).val())); 
}, 'Must be greater than start year.');

$.validator.addMethod('endMonthGreaterThanOrEqualTO',
function (value, element, params) {
  if (!/Invalid|NaN/.value) {
    if ($(params[0]).val() == $(params[1]).val()) {
      return value > $(params[2]).val();
    } else {
      return value;
    }
  }
  return isNaN(value) && isNaN($(params[2]).val());
  //|| (Number(value) >= Number($(params[2]).val())); 
}, 'Must be greater than start Month.');

//file size validation
$.validator.addMethod('filesize', function (value, element, param) {
  return this.optional(element) || (element.files[0].size <= param)
});

//password validation (This will match 1 or more uppercase characters, 1 or more lowercase characters and 1 or more digit/special character) and at least 8 char
$.validator.addMethod("passwordcheck", function (value) {
  return /[A-Z]+/.test(value) && /[a-z]+/.test(value) &&
  /[\d\W]+/.test(value) && /\S{8,}/.test(value);
}, 'Must contain minimum 8 characters including 1 Upper, 1 Lower and 1 or more digit/special char');

// select value not null check
$.validator.addMethod("valueNotEquals", function (value, element, arg) {
  return arg != value;
}, "Value must not equal arg.");

// regx for companyName - alphanumaric , - , _ , space, [], ()
$.validator.addMethod("AddressFieldRegEx", function (value, element) {
  return this.optional(element) || /^[a-z\d\-_.\[\]\(\)\/\s]+$/i.test(value);
}, "Must contain only letters, numbers, dot, [], (), dashes or underscore.");

// regx for cityNameRegex - alphanumaric , - , _ , space
$.validator.addMethod("cityNameRegex", function (value, element) {
  return this.optional(element) || /^[a-z\d\s]+$/i.test(value);
}, "It allows alphanumeric characters only.");

// regx for countryCode - alphanumaric , - , _ , space
$.validator.addMethod("countryCodeRegex", function (value, element) {
  //return this.optional(element) || /^\+?\d+$/i.test(value);
  return this.optional(element) || /^[+]\d+$/i.test(value);
  
}, "Country code is not valid.");


$.validator.addMethod("laxEmail", function(value, element) {
  // allow any non-whitespace characters as the host part
  return this.optional( element ) || /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test( value );
}, 'Please enter a valid email address.');





// regx for alphabet and space
$.validator.addMethod("alpha", function (value, element) {
  return this.optional(element) || /^[a-z\s]+$/i.test(value);
}, "Must contain alphabet characters only.");

// regx for alphanumaric , - , _ , space
$.validator.addMethod("alphanumaricRegex", function (value, element) {
  return this.optional(element) || /^[a-z\d\s]+$/i.test(value);
}, "It allows alphanumeric characters only.");

$.validator.addMethod("designationRegex", function (value, element) {
  return this.optional(element) || /^[a-z\d\-_.\s]+$/i.test(value);
}, "Must contain only letters, numbers, dot, dashes or underscore.");
// regx for MM/DD/YYYY
$.validator.addMethod("dateRegex", function (value, element) {
    return this.optional(element) || /^((0[1-9]|1[0-2])\/((0|1)[0-9]|2[0-9]|3[0-1])\/((19|20)\d\d))$/i.test(value);
}, "Enter Date in MM/DD/YYYY format.");

$.validator.addMethod("roles", function(value, elem, param) {
    if($(".roles:checkbox:checked").length > 0){
       return true;
   }else {
       return false;
   }
},"You must select at least one!");


$('#aspnetForm').validate({
  //ignore: [],  
  //onsubmit: false,
  ignore: ':hidden:not(.profilePanel .validateField input)',
  onkeyup: function (element) { $(element).valid() },
  errorClass: 'help-block',
  errorElement: 'span',
  errorPlacement: function (error, e) {
    e.closest('.validateField').append(error);
    return false;
  },
  highlight: function (e) {
    console.log('validation error');
    $(e).closest('.validateField').removeClass('has-success has-error').addClass('has-error');
    $(e).closest('.help-block').remove();
    return false;
  },
  success: function (e) {
    console.log('validation success');
    // You can remove the .addClass('has-success') part if you don't want the inputs to get green after success!
    e.closest('.validateField').removeClass('has-success has-error').addClass('has-success');
    e.closest('.help-block').remove();
    return false;
  },
  rules: {

  },
  messages: {
  
  }
});

$.validator.addClassRules({

  /*about Company*/
  validateRequired: {
    required: true
  },
  validateAlphaonly: {
    alpha: true
  },
  validateAlphanumaric: {
    alphanumaricRegex: true
  },
  validateNumber: {
    digits: true
  },
  validateEmail: {
    laxEmail: true
  },
  validateURL: {
	url: true
  },
  validatePassword: {
    passwordcheck: true
  },
  validateConfirmPassword: {
    equalTo: '.validatePassword'
  },
  
  validateMobileNoLimit: {
    minlength: 10,
    maxlength: 10,
    digits: true
  },
  validatePincodeLimit: {
    minlength: 6,
    maxlength: 6,
    digits: true
  },
  validateTelephoneNoLimit: {
    minlength: 8,
    maxlength: 12,
  },
  
  validatetxtDesignation: {
	 designationRegex: true
  },
  
  validateDate: {
      dateRegex: true
  },

  validateMinStrict: {
    minStrict: 0
  },

  validateSubvenueCount: {
    minStrict1: 1
  },
  validateAddressField: {
    AddressFieldRegEx:true
  }

});

$('.validateContainer .checkValidationBtn').click(ValidateAndSubmit);

function ValidateAndSubmit(evt) {
  //console.log('validate');	
  var $group = $(evt.currentTarget).parents('.validateContainer');
  var isValid = true;
  //$group.find(':input').each(function (i, item) {
  $group.find('.validateField .form-control').each(function (i, item) {
    if (!$(item).valid())
      isValid = false;
  });
  if (!isValid)
    evt.preventDefault();
}

function jqValidationClickEvent() {
  $('.validateContainer .checkValidationBtn').click(ValidateAndSubmit);
}

function pageLoad() {
	$('.validateContainer .checkValidationBtn').click(ValidateAndSubmit);
}

//});

function pageLoad() {
	$('.validateContainer .checkValidationBtn').click(ValidateAndSubmit);
}

$("#ctl00_ContentPlaceHolder1_FUPhotoFile").change(function() {

    var val = $(this).val();

    switch(val.substring(val.lastIndexOf('.') + 1).toLowerCase()){
        case 'jpg': case 'png':
            alert("an image");
            break;
        default:
            $(this).val('');
            // error message here
            alert("not an image");
            break;
    }
});